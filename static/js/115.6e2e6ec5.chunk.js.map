{"version":3,"file":"static/js/115.6e2e6ec5.chunk.js","mappings":"+MA6FA,UAxFe,WACb,OAAsCA,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAA0CF,EAAAA,EAAAA,UAAS,IAAnD,eAAOG,EAAP,KAAsBC,EAAtB,KACA,GAAwBJ,EAAAA,EAAAA,WAAS,GAAjC,eAAOK,EAAP,KAAaC,EAAb,KACA,GAA0BN,EAAAA,EAAAA,UAAS,MAAnC,eAAOO,EAAP,KAAcC,EAAd,KACA,GAAkCR,EAAAA,EAAAA,WAAS,GAA3C,eAAOS,EAAP,KAAkBC,EAAlB,KACMC,GAAWC,EAAAA,EAAAA,MACjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAoDA,OArCAC,EAAAA,EAAAA,YAAU,WACJF,EAAaG,IAAI,WACnBP,GAAa,IACbQ,EAAAA,EAAAA,IAAUJ,EAAaG,IAAI,SAAU,GAClCE,MAAK,SAAAC,GACJhB,EAAiBgB,EAAKC,QACvB,IACAC,OAAM,SAAAC,GACLf,EAASe,EACV,IACAC,SAAQ,WACPlB,GAAQ,GACRI,GAAa,GACbR,EAAe,GAChB,IAEN,GAAE,CAACY,KAEJE,EAAAA,EAAAA,YAAU,WACJf,GAAeA,EAAYwB,OAAS,GAAKpB,IAC3CK,GAAa,IACbQ,EAAAA,EAAAA,IAAUjB,EAAa,GACpBkB,MAAK,SAAAC,GACJhB,EAAiBgB,EAAKC,QACvB,IACAC,OAAM,SAAAC,GACLf,EAASe,EACV,IACAC,SAAQ,WACPlB,GAAQ,GACRI,GAAa,GACbR,EAAe,GAChB,KAELwB,QAAQC,IAAI,aACb,GAAE,CAACtB,EAAMJ,KAGR,4BACE,2CACA,kBAAM2B,SArDW,SAAAC,GACnBA,EAAMC,iBACF7B,GACFc,EAAgB,CAAEgB,MAAO9B,IAE3BK,GAAQ,EACT,EA+CiC0B,OAAO,MAArC,WACE,kBACEC,KAAK,OACLC,YAAY,iCACZC,UAAQ,EACRC,SAlDa,SAAAP,GACnB,IAAQQ,EAAUR,EAAMS,OAAhBD,MACRnC,EAAemC,EAChB,EAgDOA,MAAOpC,KAET,mBAAQgC,KAAK,SAAb,uBAGQ,MAAT1B,IAAiB,uBAAIA,IACrBE,IAAa,SAAC,IAAD,KACd,wBACGN,EAAcoC,KAAI,SAAAC,GAAK,OACtB,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMjC,GAAxC,SACG6B,EAAMK,SAFFL,EAAME,GADO,QAU/B,C","sources":["components/Movies/Movies.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport { getMovies } from '../../services/api';\nimport { Loader } from '../Loader/Loader';\n\nconst Movies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [searchResults, setSearchResults] = useState([]);\n  const [goit, setGoit] = useState(false);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const location = useLocation();\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const hendleSubmit = event => {\n    event.preventDefault();\n    if (searchQuery) {\n      setSearchParams({ query: searchQuery });\n    }\n    setGoit(true);\n  };\n\n  const hendleChange = event => {\n    const { value } = event.target;\n    setSearchQuery(value);\n  };\n\n  useEffect(() => {\n    if (searchParams.get('query')) {\n      setIsLoading(true);\n      getMovies(searchParams.get('query'), 1)\n        .then(data => {\n          setSearchResults(data.results);\n        })\n        .catch(err => {\n          setError(err);\n        })\n        .finally(() => {\n          setGoit(false);\n          setIsLoading(false);\n          setSearchQuery('');\n        });\n    }\n  }, [searchParams]);\n\n  useEffect(() => {\n    if (searchQuery && searchQuery.length > 0 && goit) {\n      setIsLoading(true);\n      getMovies(searchQuery, 1)\n        .then(data => {\n          setSearchResults(data.results);\n        })\n        .catch(err => {\n          setError(err);\n        })\n        .finally(() => {\n          setGoit(false);\n          setIsLoading(false);\n          setSearchQuery('');\n        });\n    }\n    console.log('SEARCH BTN');\n  }, [goit, searchQuery]);\n\n  return (\n    <div>\n      <h1>Search Movies</h1>\n      <form onSubmit={hendleSubmit} method=\"GET\">\n        <input\n          type=\"text\"\n          placeholder=\"type somethin for searching...\"\n          required\n          onChange={hendleChange}\n          value={searchQuery}\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n\n      {error != null && <p>{error}</p>}\n      {isLoading && <Loader />}\n      <ul>\n        {searchResults.map(movie => (\n          <li key={movie.id}>\n            <Link to={`${movie.id}`} state={{ from: location }}>\n              {movie.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["useState","searchQuery","setSearchQuery","searchResults","setSearchResults","goit","setGoit","error","setError","isLoading","setIsLoading","location","useLocation","useSearchParams","searchParams","setSearchParams","useEffect","get","getMovies","then","data","results","catch","err","finally","length","console","log","onSubmit","event","preventDefault","query","method","type","placeholder","required","onChange","value","target","map","movie","to","id","state","from","title"],"sourceRoot":""}